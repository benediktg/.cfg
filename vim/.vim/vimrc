runtime defaults.vim

set nocompatible
set backspace=indent,eol,start
set encoding=utf-8
set ffs=unix,dos,mac

" EinrÃ¼ckung, Tabulator "
filetype plugin indent on
syntax on
set autoindent
set smartindent
set expandtab
set shiftwidth=4
set tabstop=4
set softtabstop=4
if v:version >= 800
    set breakindent
endif
set formatoptions+=lor
set iskeyword-=_
set nrformats=
set lbr
set showbreak=**\ \

" Bedienung "
set number
set relativenumber
set cursorline
set showmode
set showcmd
set ruler
set laststatus=2
set wrap
set title
set scrolloff=3
set sidescrolloff=5
set sidescroll=1
set updatetime=250
set autoread
set autowrite       " Automatically save before commands like :next and :make
set wildmenu
set wildmode=longest:full,full
set wildignore+=tags,.*.un~,*.pyc
set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png,*.ico,*.tif
set wildignore+=*.pdf,*.psd,*.xcf
set wildignore+=node_modules/*,bower_components/*,site-packages/*
set lazyredraw
set splitright
set splitbelow
set hidden

" Suche "
set incsearch
set ignorecase
set smartcase
set nohlsearch

" # Mappings {{{
let mapleader = 's'
let maplocalleader = 's'

nmap <Leader>m :set so=999<cr>
nmap <Leader><Leader>m :set so=0<cr>

nmap <Leader>ev :e $MYVIMRC<cr>

nnoremap j gj
nnoremap k gk
inoremap ii <Esc>$a
inoremap jk <Esc>
nnoremap + :

augroup autosourcing
    autocmd!
    autocmd BufWritePost vimrc source %
augroup END

nnoremap <F5> :GundoToggle<CR>
" }}}

" Plugins "
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

function! Cond(cond, ...)
  let opts = get(a:000, 0, {})
  return a:cond ? opts : extend(opts, { 'on': [], 'for': [] })
endfunction

function! BuildYCM(info)
    " info is a dictionary with 3 fields
    " - name:   name of the plugin
    " - status: 'installed', 'updated', or 'unchanged'
    " - force:  set on PlugInstall! or PlugUpdate!
    if a:info.status == 'installed' || a:info.force
        !./install.py
    endif
endfunction

call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-abolish'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-jdaddy'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-vinegar'

Plug 'Quramy/vim-js-pretty-template'
"Plug 'Valloric/YouCompleteMe', Cond(v:version >= 800, { 'do': function('BuildYCM') })
Plug 'ajh17/VimCompletesMe'
Plug 'editorconfig/editorconfig-vim'
Plug 'isa/vim-matchit'
Plug 'lervag/vimtex'
Plug 'ludovicchabant/vim-gutentags', Cond(v:version >= 800)
Plug 'mattn/emmet-vim'
Plug 'mileszs/ack.vim'
Plug 'neomake/neomake'
Plug 'sheerun/vim-polyglot'
Plug 'sjl/gundo.vim'
Plug 'w0rp/ale'
Plug 'xero/securemodelines'

Plug 'neoclide/coc.nvim', Cond(v:version >= 800, { 'tag': '*', 'do': './install.sh' })
"Plug 'neoclide/coc-vimtex', Cond(v:version >= 800, { 'do': 'yarn install --pure-lockfile' })

Plug 'altercation/vim-colors-solarized'

call plug#end()

let g:solarized_menu = 0
colorscheme solarized
set background=light

" Markdown "
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh', 'json']
let g:markdown_syntax_conceal = 0
let g:markdown_minlines = 100

" jsonc "
autocmd FileType json syntax match Comment +\/\/.\+$+

" Rainbow parentheses "
let g:rainbow_active = 1

" Emmet "
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall

" # Ack.vim {{{
if executable('ag')
    let g:ackprg = 'ag --vimgrep --smart-case'
    cnoreabbrev ag Ack
    cnoreabbrev aG Ack
    cnoreabbrev Ag Ack
    cnoreabbrev AG Ack
endif
" }}}

" # vimtex {{{
let g:tex_flavor = 'latex'
let g:polyglot_disabled = ['latex']

if !exists('g:ycm_semantic_triggers')
    let g:ycm_semantic_triggers = {}
endif
let g:ycm_semantic_triggers.tex = g:vimtex#re#youcompleteme

augroup VimCompletesMeTex
    autocmd!
    autocmd FileType tex let b:vcm_omni_pattern = g:vimtex#re#neocomplete
augroup END
" }}}
